{"version":3,"file":"index.esm.js","sources":["../index.js"],"sourcesContent":["function checkElement (node) {\r\n  return typeof node === \"string\" ? document.getElementById(node) : node;\r\n}\r\n\r\nexport default function SplitViews (options) {\r\n\r\n  let defaultOptions = {\r\n    parent: 'split-view',\r\n    direction: 'vertical',\r\n    gutterSize: 5,\r\n    minSize: 20,\r\n    sizes: [],\r\n    onDragEnd: options.onDragEnd,\r\n    ...options\r\n  };\r\n\r\n  let parentElement = checkElement(defaultOptions.parent),\r\n    parentChildren = Array.from(parentElement.children),\r\n    isMouseOnGutter = false,\r\n    childSize = 100 / parentChildren.length;\r\n\r\n  let direction = defaultOptions.direction,\r\n    sizes = defaultOptions.sizes,\r\n    onDragEnd = defaultOptions.onDragEnd,\r\n    gutterId = 0,\r\n    leftChild = null,\r\n    rightChild = null,\r\n    gutterOffset = defaultOptions.gutterSize / 2;\r\n\r\n  parentChildren.forEach((el, index) => {\r\n    let prop = direction === 'vertical' ? 'width' : 'height';\r\n    el.style[prop] = sizes.length === parentChildren.length\r\n      ? `calc(${sizes[index]}% - ${gutterOffset}px)`\r\n      : `calc(${childSize}% - ${gutterOffset}px)`;\r\n\r\n    if (index < parentChildren.length - 1) {\r\n      const gutter = document.createElement('span');\r\n      const gutterCls = direction === 'vertical' ? \"gutter-vertical\" : \"gutter-horizontal\";\r\n\r\n      gutter.classList.add(\"gutter\", gutterCls);\r\n\r\n      gutter.style[prop] = defaultOptions.gutterSize + 'px';\r\n      gutter.dataset.id = index;\r\n      el.parentNode.insertBefore(gutter, el.nextSibling);\r\n    }\r\n  });\r\n\r\n  function onMouseDown (e) {\r\n    if (e.target && e.target.classList.contains('gutter')) {\r\n      isMouseOnGutter = true;\r\n      gutterId = parseInt(e.target.dataset.id, 10);\r\n\r\n      leftChild = parentChildren[gutterId];\r\n      rightChild = parentChildren[gutterId + 1];\r\n\r\n      parentElement.addEventListener('mousemove', onMouseMove, false);\r\n      parentElement.addEventListener('mouseup', onMouseUp, false);\r\n    }\r\n  }\r\n\r\n  function onMouseUp () {\r\n    isMouseOnGutter = false;\r\n    parentElement.removeEventListener('mousemove', onMouseMove, false);\r\n    parentElement.removeEventListener('mouseup', onMouseUp, false);\r\n\r\n    if (onDragEnd) {\r\n      let newSizes = parentChildren.map(el => el.getBoundingClientRect().width / parentElement.offsetWidth * 100);\r\n      onDragEnd(newSizes);\r\n    }\r\n  }\r\n\r\n  function onMouseMove (e) {\r\n    if (isMouseOnGutter && leftChild && rightChild) {\r\n\r\n      let leftChildInfos = leftChild.getBoundingClientRect();\r\n      let rightChildInfos = rightChild.getBoundingClientRect();\r\n\r\n      let leftElNewSize = direction === 'vertical'\r\n        ? (e.clientX - leftChildInfos.x)\r\n        : (e.clientY - leftChildInfos.y);\r\n\r\n      let rightElNewSize = direction === 'vertical'\r\n        ? (rightChildInfos.width + (leftChildInfos.width - leftElNewSize))\r\n        : (rightChildInfos.height + (leftChildInfos.height - leftElNewSize));\r\n\r\n      if (leftElNewSize >= defaultOptions.minSize && rightElNewSize >= defaultOptions.minSize) {\r\n\r\n        let prop = direction === 'vertical' ? 'width' : 'height';\r\n\r\n        leftChild.style[prop] = (leftElNewSize - gutterOffset) + 'px';\r\n        rightChild.style[prop] = (rightElNewSize + gutterOffset) + 'px';\r\n      }\r\n    }\r\n\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n  }\r\n\r\n  parentElement.addEventListener('mousedown', onMouseDown, false);\r\n}\r\n"],"names":["SplitViews","options","defaultOptions","parent","direction","gutterSize","minSize","sizes","onDragEnd","parentElement","node","document","getElementById","parentChildren","Array","from","children","isMouseOnGutter","childSize","length","gutterId","leftChild","rightChild","gutterOffset","onMouseUp","removeEventListener","onMouseMove","newSizes","map","el","getBoundingClientRect","width","offsetWidth","e","leftChildInfos","rightChildInfos","leftElNewSize","clientX","x","clientY","y","rightElNewSize","height","prop","style","preventDefault","stopPropagation","forEach","index","gutter","createElement","gutterCls","classList","add","dataset","id","parentNode","insertBefore","nextSibling","addEventListener","target","contains","parseInt"],"mappings":"AAIe,SAASA,EAAYC,GAElC,IAAIC,EAAiB,CACnBC,OAAQ,aACRC,UAAW,WACXC,WAAY,EACZC,QAAS,GACTC,MAAO,GACPC,UAAWP,EAAQO,aAChBP,GAGDQ,EAfmB,iBADFC,EAgBYR,EAAeC,QAfdQ,SAASC,eAAeF,GAAQA,EAgBhEG,EAAiBC,MAAMC,KAAKN,EAAcO,UAC1CC,GAAkB,EAClBC,EAAY,IAAML,EAAeM,OAnBrC,IAAuBT,EAqBrB,IAAIN,EAAYF,EAAeE,UAC7BG,EAAQL,EAAeK,MACvBC,EAAYN,EAAeM,UAC3BY,EAAW,EACXC,EAAY,KACZC,EAAa,KACbC,EAAerB,EAAeG,WAAa,EAiC7C,SAASmB,IAKP,GAJAP,GAAkB,EAClBR,EAAcgB,oBAAoB,YAAaC,GAAa,GAC5DjB,EAAcgB,oBAAoB,UAAWD,GAAW,GAEpDhB,EAAW,CACb,IAAImB,EAAWd,EAAee,KAAIC,GAAMA,EAAGC,wBAAwBC,MAAQtB,EAAcuB,YAAc,MACvGxB,EAAUmB,IAId,SAASD,EAAaO,GACpB,GAAIhB,GAAmBI,GAAaC,EAAY,CAE9C,IAAIY,EAAiBb,EAAUS,wBAC3BK,EAAkBb,EAAWQ,wBAE7BM,EAA8B,aAAdhC,EACf6B,EAAEI,QAAUH,EAAeI,EAC3BL,EAAEM,QAAUL,EAAeM,EAE5BC,EAA+B,aAAdrC,EAChB+B,EAAgBJ,OAASG,EAAeH,MAAQK,GAChDD,EAAgBO,QAAUR,EAAeQ,OAASN,GAEvD,GAAIA,GAAiBlC,EAAeI,SAAWmC,GAAkBvC,EAAeI,QAAS,CAEvF,IAAIqC,EAAqB,aAAdvC,EAA2B,QAAU,SAEhDiB,EAAUuB,MAAMD,GAASP,EAAgBb,EAAgB,KACzDD,EAAWsB,MAAMD,GAASF,EAAiBlB,EAAgB,MAI/DU,EAAEY,iBACFZ,EAAEa,kBAlEJjC,EAAekC,SAAQ,CAAClB,EAAImB,KAC1B,IAAIL,EAAqB,aAAdvC,EAA2B,QAAU,SAKhD,GAJAyB,EAAGe,MAAMD,GAAQpC,EAAMY,SAAWN,EAAeM,OAC7C,QAAQZ,EAAMyC,SAAazB,OAC3B,QAAQL,QAAgBK,OAExByB,EAAQnC,EAAeM,OAAS,EAAG,CACrC,MAAM8B,EAAStC,SAASuC,cAAc,QAChCC,EAA0B,aAAd/C,EAA2B,kBAAoB,oBAEjE6C,EAAOG,UAAUC,IAAI,SAAUF,GAE/BF,EAAOL,MAAMD,GAAQzC,EAAeG,WAAa,KACjD4C,EAAOK,QAAQC,GAAKP,EACpBnB,EAAG2B,WAAWC,aAAaR,EAAQpB,EAAG6B,iBAuD1CjD,EAAckD,iBAAiB,aAnD/B,SAAsB1B,GAChBA,EAAE2B,QAAU3B,EAAE2B,OAAOR,UAAUS,SAAS,YAC1C5C,GAAkB,EAClBG,EAAW0C,SAAS7B,EAAE2B,OAAON,QAAQC,GAAI,IAEzClC,EAAYR,EAAeO,GAC3BE,EAAaT,EAAeO,EAAW,GAEvCX,EAAckD,iBAAiB,YAAajC,GAAa,GACzDjB,EAAckD,iBAAiB,UAAWnC,GAAW,OA0CA"}